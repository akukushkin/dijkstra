1. Техническое задание:
Разработать программу для нахождения кратчайших пути и расстояния 
между двумя вершинами взвешенного ориентированного графа, используя 
алгоритм Дейкстры.

Входные данные:
1) Файл с графом в формате .xgml;
2) Начальная вершина;
3) Конечная вершина.

Выходные данные:
1) Кратчайший путь;
2) Кратчайшее расстояние;
Примечание: если путь не найден, то вывод соответсвующего сообщения.

2. Технология/язык разработки:
Проект разработан на языке C++ с использованием библиотек: Qt, STL.
Программа является кроссплатформенной (Linux - Windows).

3. Описание функциональности.
Программа работает в консольном режиме. Файл с графом подается на 
вход через командную строку. 
В силу специфики работы алгоритма Дейкстры, программа находит 
кратчайшие пути до каждой из вершин, если такие пути существуют. 
В общем случае алгоритм имеет сложность O(V^2), но в нашем 
случае использовалась структура данных set, что позволяет 
добиться сложности O(E*logV), где V - кол-во вершин, E - кол-во ребер.
Если же использовать реализацию очереди с приоритетом на основе 
кучи Фибоначчи, то можно добиться сложности O(V+logV+E), что 
является наилучшей теоретической сложностью.

4. Описание структуры программы.
1) Описание типов:
typedef ssize_t vertex_t - тип, соответсвующий номеру вершины;
typedef double weight_t - тип, соответсвующий весу ребра;
struct neighbor - структура, хранящая информацию о смежной вершине (номер, вес);
typedef std::vector<std::vector<neighbor> > adjacency_list_t - тип, соответсвующий представлению 
                                                               графа в программе в виде списка смеежности.
class CGraph - класс графа.

2) Описание класса CGraph:
2.1) Переменные:
adjacency_list_t adjacency_list - хранение графа в виде списка смежности.

2.2) Методы:
void dijkstraComputePaths(vertex_t source,
                          std::vector<weight_t> &min_distance,
                          std::vector<vertex_t> &previous);
Описание: функция нахождения кратчайших путей и расстояний 
от вершины source до каждой вершины графа.
Входные параметры:
1) номер вершины - source.
Выходные параметры:
1) вектор кратчайших расстояний - min_distance;
2) вектор кратчайших путей - previous.

std::list<vertex_t> dijkstraGetShortestPathTo(vertex_t goal,
                                                  const std::vector<vertex_t> &previous);
Описание: функция нахождения кратчайшего расстояния между двумя точками (алгоритм Дейкстры).
Входные параметры:
1) конечная точка - goal;
2) вектор кратчайших путей - previous.
Выходные параметры:
1) список, содержащий кратчайший путь.

void parseEdge(QXmlStreamReader& xgml, vertex_t &from, vertex_t &to, weight_t &weight);
Описание: функция парсинга edge section в xgml-файле.
Входные параметры:
1) ссылка на секцию в xgml файле - xgml.
Выходные параметры:
1) вершина, из которой выходит ребро - from;
2) вершина, в которую направленно ребро - to;
3) вес ребра - weight.

CGraph(size_t cntVertex);
Описание: конструктор с указанием количества вершин.
Входные параметры:
1) количество вершин - cntVertex.
Выходные параметры: -

CGraph(const std::string& inputFileName);
Описание: конструктор, инициализирующий граф через файл.
Входные параметры:
1) имя файла с графом - inputFileName.
Выходные параметры: -

~CGraph();
Описание: деструктор.
Входные параметры: -
Выходные параметры: -

void addEdge(vertex_t from, vertex_t to, weight_t weight);
Описание: добавление ребра в граф.
Входные параметры:
1) вершина, из которой выходит ребро - from;
2) вершина, в которую направленно ребро - to;
3) вес ребра - weight.
Выходные параметры: -

std::list<vertex_t> getShortestPath(vertex_t source, vertex_t goal);
Описание: функция нахождения кратчайшего пути между двумя точками.
Входные параметры:
1) начальная точка - source;
2) конечная точка - goal.
Выходные параметры:
1) список, содеражащий кратчайший путь.

ssize_t getMinDistance(vertex_t source, vertex_t goal);
Описание: функция нахождения кратчайшего расстояния между двумя точками.
Входные параметры:
1) начальная точка - source;
2) конечная точка - goal.
Выходные параметры:
1) кратчайшее расстояние между двумя точками.

size_t getCountVertex() const;
Описание: функция, возвращающая значения количества вершин графа.
Входные параметры: -
Выходные параметры:
1) количество вершин графа.
